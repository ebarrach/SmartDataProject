# ============================================
# IMPORTS
# ============================================

import pandas as pd
import requests
import json
from app.database import SessionLocal
from sqlalchemy import inspect, text
import time
import sqlalchemy.exc


# ============================================
# OPENROUTER CONFIGURATION
# ============================================

OPENROUTER_API_KEY = "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"
OPENROUTER_MODEL = "mistralai/mistral-small-3.2-24b-instruct:free"
OPENROUTER_ENDPOINT = "https://openrouter.ai/api/v1/chat/completions"
HEADERS = {
    "Authorization": f"Bearer {OPENROUTER_API_KEY}",
    "HTTP-Referer": "http://localhost",
    "Content-Type": "application/json"
}

# ============================================
# AI SUGGESTION FOR EXCEL STRUCTURE
# ============================================

def suggest_structure_from_ia(df: pd.DataFrame, table: str) -> str:
    """Send a sample of the Excel file to the AI model via OpenRouter
    to detect any inconsistencies or structural errors.
    The Mistral model analyses the columns, types, and sample data
    to suggest corrections aimed at ensuring maximum compatibility
    with the target relational SQL database.
    Parameters:
    ---------- -
    df: pd.DataFrame
        Data from the Excel file to be evaluated.
    table: str
        Name of the target SQL table (context provided to the AI).
    Return:
    -------
    str
        Message containing the suggestions generated by the AI model.
    Version:
    --------
    specification: Esteban Barracho (v.1 14/07/2025)
    implement: Esteban Barracho (v.1 14/07/2025)
    """

    preview = df.head(3).to_dict(orient="records")
    prompt = (
        f"Voici un extrait d‚Äôun fichier Excel destin√© √† √™tre import√© dans une base SQL dans la table `{table}`.\n"
        f"Donn√©es :\n{json.dumps(preview, indent=2)}\n\n"
        "Peux-tu identifier des incoh√©rences, des colonnes suspectes, des types mal align√©s ou des fautes ? "
        "Sugg√®re des corrections ou am√©liorations pour que l‚Äôimportation soit propre et coh√©rente avec une base relationnelle."
    )

    payload = {
        "model": OPENROUTER_MODEL,
        "messages": [
            {"role": "user", "content": prompt}
        ]
    }

    try:
        response = requests.post(OPENROUTER_ENDPOINT, headers=HEADERS, json=payload)
        if response.status_code == 200:
            return response.json()["choices"][0]["message"]["content"]
        else:
            return f"‚ùå Erreur IA ({response.status_code}) : {response.text}"
    except Exception as e:
        return f"‚ùå Exception lors de l'appel OpenRouter : {e}"

# ============================================
# REORDERING COLUMNS
# ============================================

def reorder_columns(df: pd.DataFrame, table: str):
    """Reorders the columns of the DataFrame to match
    the order defined in the target SQL table. Also displays
    missing and unnecessary columns.
    Parameters:
    -----------
    df: pd.DataFrame
        Data from the Excel file to be aligned.
    table: str
        Name of the SQL table to conform to.
    Return:
    -------
    pd.DataFrame
        DataFrame with only the recognised columns,
        in the correct order.
    Version:
    --------
    specification: Esteban Barracho (v.1 14/07/2025)
    implement: Esteban Barracho (v.1 14/07/2025)
    """
    db = SessionLocal()
    try:
        inspector = inspect(db.get_bind())
        sql_columns = [col["name"] for col in inspector.get_columns(table)]
        df_cols = df.columns.tolist()
        missing = [col for col in sql_columns if col not in df_cols]
        extra = [col for col in df_cols if col not in sql_columns]
        print(f"‚Ñπ Colonnes manquantes: {missing}")
        print(f"‚Ñπ Colonnes inutiles: {extra}")
        ordered = [col for col in sql_columns if col in df.columns]
        return df[ordered]
    finally:
        db.close()

# ============================================
# CORRECTION OF COLUMN TYPES
# ============================================

def fix_types(df: pd.DataFrame, table: str):
    """Corrects the column types of a DataFrame so that they
    match the expected types in the target SQL table.
    Dates are converted to YYYY-MM-DD format, integers
    and decimals to native numeric format, and Booleans
    are explicitly converted back.
    Parameters:
    -----------
    df: pd.DataFrame
        Data from the Excel file to be corrected.
    table: str
        Name of the target SQL table.
    Return:
    -------
    pd.DataFrame
        DataFrame with types converted to match the SQL structure.
    Version:
    --------
    specification: Esteban Barracho (v.1 14/07/2025)
    implement: Esteban Barracho (v.1 14/07/2025)
    """
    db = SessionLocal()
    try:
        inspector = inspect(db.get_bind())
        for col in inspector.get_columns(table):
            name = col["name"]
            sql_type = str(col["type"]).upper()
            if name not in df.columns:
                continue
            if "DATE" in sql_type:
                df[name] = pd.to_datetime(df[name], errors="coerce").dt.strftime("%Y-%m-%d")
            elif "INT" in sql_type:
                df[name] = pd.to_numeric(df[name], errors="coerce").astype("Int64")
            elif "DECIMAL" in sql_type or "FLOAT" in sql_type:
                df[name] = pd.to_numeric(df[name], errors="coerce")
            elif "BOOLEAN" in sql_type:
                df[name] = df[name].astype(bool)
        return df
    finally:
        db.close()

# ============================================
# OPENROUTER INITIALISATION + DB CONNECTION
# ============================================

def prepare_adaptation():
    """Checks the connection to the database before launching
    smart Excel adaptations (OpenRouter). Uses a
    loop of attempts to manage delays at Docker startup.
    Version:
    --------
    specification: Esteban Barracho (v.1 13/07/2025)
    implement: Esteban Barracho (v.1 13/07/2025)
    """
    max_retries = 10
    for attempt in range(max_retries):
        try:
            db = SessionLocal()
            db.execute(text("SELECT 1"))
            print("üß† OpenRouter pr√™t pour l'adaptation Excel intelligente.")
            return
        except sqlalchemy.exc.OperationalError as e:
            print(f"‚è≥ Connexion base √©chou√©e (tentative {attempt+1}) : {e}")
            time.sleep(2)
        finally:
            db.close()
    print("‚ùå √âchec de connexion DB pour l‚Äôadaptation.")

# ============================================
# SMART ADAPTATION OF AN EXCEL FILE
# ============================================

def adapt_excel(file_path: str, table: str) -> tuple[list[dict], str]:
    """Reads an Excel file, cleans columns and types,
    calls AI for a suggestion, and returns rows
    ready to insert + the suggestion.
    Parameters:
    -----------
    file_path: str
        Path to the imported Excel file.
    table: str
        Name of the target SQL table.
    Return:
    -------
    tuple[list[dict], str]
        Rows converted to the correct format + AI suggestion.
    Version:
    --------
    specification: Esteban Barracho (v.1.1 14/07/2025)
    implement: Esteban Barracho (v.1.1 14/07/2025)
    """
    df = pd.read_excel(file_path)
    df.columns = df.columns.str.strip()

    suggestion = suggest_structure_from_ia(df, table)
    print("üß† Suggestion IA :", suggestion)

    df = reorder_columns(df, table)
    df = fix_types(df, table)
    rows = df.fillna("").to_dict(orient="records")

    return rows, suggestion

# ============================================
# ADAPTATION AND INTEGRATION EXCEL FILE
# ============================================

def adapt_excel_to_table(table: str, file_path: str, db):
    """Automatically adapts an Excel file to an SQL table:
    adjusts columns, corrects types, calls on AI to
    suggest possible corrections, then inserts valid rows
    into the database.
    Parameters:
    -----------
    table: str
        Name of the target SQL table.
    file_path: str
        Path to the Excel file to be imported.
    db: Session
        Active SQLAlchemy session (passed by FastAPI).
    Return:
    -------
    tuple[int, str]
        Number of rows inserted into the database +
        AI suggestion returned for display.
    Version:
    --------
    specification: Esteban Barracho (v.2 14/07/2025)
    implement: Esteban Barracho (v.2 14/07/2025)
    """
    rows, suggestion = adapt_excel(file_path, table)
    if not rows:
        return 0, suggestion

    columns = rows[0].keys()
    keys = ", ".join([f"`{k}`" for k in columns])
    vals = ", ".join([f":{k}" for k in columns])
    sql = text(f"INSERT INTO `{table}` ({keys}) VALUES ({vals})")
    count = 0
    for row in rows:
        try:
            db.execute(sql, row)
            count += 1
        except Exception as e:
            print(f"‚ùå Erreur ligne ignor√©e : {e}")
    db.commit()
    return count, suggestion
